// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  address       String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id            Int             @id @default(autoincrement())
  name          String
  description   String?
  productDetail ProductDetail[]
  productImage  ProductImage[]
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
}

model ProductDetail {
  id          Int           @id @default(autoincrement())
  product     Product?      @relation(fields: [productId], references: [id])
  productId   Int
  price       Int
  volume      Int
  unit        String
  OrderDetail OrderDetail[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String
  Product Product[]
}

model OrderStatus {
  id       String  @unique
  name     String
  sequence Int
  Order    Order[]
}

model OrderDetailStatus {
  id          String        @unique
  name        String
  sequence    Int
  OrderDetail OrderDetail[]
}

model Order {
  id          String        @id @default(cuid())
  status      OrderStatus   @relation(fields: [statusId], references: [id])
  statusId    String
  user        User          @relation(fields: [userId], references: [id])
  total       Decimal
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  deletedAt   DateTime?
  userId      String
  OrderDetail OrderDetail[]
}

model OrderDetail {
  id              String            @id @default(cuid())
  order           Order             @relation(fields: [orderId], references: [id])
  orderId         String
  status          OrderDetailStatus @relation(fields: [statusId], references: [id])
  statusId        String
  productName     String
  price           Int
  quantity        Int
  productDetail   ProductDetail     @relation(fields: [productDetailId], references: [id])
  productDetailId Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  deletedAt       DateTime?
}
